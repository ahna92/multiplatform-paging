/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import androidx.build.KmpPlatformsKt
import androidx.build.PlatformIdentifier
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType
import androidx.build.Publish
import org.jetbrains.kotlin.konan.target.Family


plugins {
    id("AndroidXPlugin")
    id("com.android.library")
}

def macEnabled = KmpPlatformsKt.enableMac(project)
def linuxEnabled = KmpPlatformsKt.enableLinux(project)

androidXMultiplatform {
    js {
        nodejs()
        binaries.executable()
    }
    jvm()
    mac()
    linux()
    ios()
    android()
    mingw()
    tvos()
    watchos()

    defaultPlatform(PlatformIdentifier.JVM)

    sourceSets {
        commonMain {
            dependencies {
                api(libs.kotlinStdlib)
                api(libs.kotlinCoroutinesCore)
            }
        }

        nonJsMain {
            dependsOn(commonMain)
        }

        commonJvmAndroidMain {
            dependsOn(nonJsMain)

            dependencies {
                api("androidx.arch.core:core-common:2.2.0")
            }
        }

        jvmMain {
            dependsOn(commonJvmAndroidMain)
        }

        androidMain {
            dependsOn(commonJvmAndroidMain)
        }

        commonTest {
            dependencies {
                implementation(libs.kotlinCoroutinesTest)
                implementation(libs.kotlinTest)
                implementation(project(":kruth:kruth"))
                implementation(project(":internal-testutils-paging"))
            }
        }

        nonJsTest {
            dependsOn(commonTest)
        }

        commonJvmAndroidTest {
            dependsOn(nonJsTest)
            dependencies {
                implementation(libs.junit)
                implementation(libs.mockitoCore4)
                implementation(libs.mockitoKotlin4)
                implementation(project(":internal-testutils-common"))
                implementation(project(":internal-testutils-ktx"))
            }
        }

        jvmTest {
            dependsOn(commonJvmAndroidTest)
            dependencies {
                implementation(libs.junit)
                implementation(libs.mockitoCore4)
                implementation(libs.mockitoKotlin4)
            }
        }

        androidInstrumentedTest {
            dependsOn(commonJvmAndroidTest)
            dependencies {
                implementation(libs.testRunner)
                implementation(libs.mockitoAndroid)
            }
        }

        if (macEnabled || linuxEnabled) {
            nativeMain {
                dependsOn(commonMain)
                dependencies {
                    implementation(libs.atomicFu)
                }
            }
            linuxAndDarwinMain {
                dependsOn(nativeMain)
            }
            nativeTest {
                dependsOn(commonTest)
            }
            linuxAndDarwinTest {
                dependsOn(nativeTest)
            }
        }
        if (macEnabled) {
            darwinMain {
                dependsOn(linuxAndDarwinMain)
            }
        }

        if (linuxEnabled) {
            linuxMain {
                dependsOn(linuxAndDarwinMain)
            }
        }

        targets.all { target ->
            if (target.platformType == KotlinPlatformType.native) {
                target.compilations["main"].defaultSourceSet {
                    def konanTargetFamily = target.konanTarget.family
                    if (konanTargetFamily == Family.OSX || konanTargetFamily == Family.IOS || konanTargetFamily == Family.TVOS || konanTargetFamily == Family.WATCHOS) {
                        dependsOn(darwinMain)
                    } else if (konanTargetFamily == Family.LINUX) {
                        dependsOn(linuxMain)
                    } else if (konanTargetFamily == Family.MINGW) {
                        dependsOn(nativeMain)
                    } else {
                        throw new GradleException("unknown native target ${target}")
                    }
                }
                target.compilations["test"].defaultSourceSet {
                    dependsOn(nativeTest)
                }
            }
        }

        targets.each { target ->
            if (target.platformType == KotlinPlatformType.common) return
            if (target.platformType == KotlinPlatformType.androidJvm) return
            if (target.platformType != KotlinPlatformType.js) {
                target.compilations.main.defaultSourceSet.dependsOn(kotlinExtension.sourceSets.nonJsMain)
                target.compilations.test.defaultSourceSet.dependsOn(kotlinExtension.sourceSets.nonJsTest)
            }
        }
    }
}

// top level declaration because the KGP sourceSets declaration used by androidXMultiplatform
// does not support constraints or samples configurations yet
dependencies {
    samples(project(":paging:paging-samples"))
}

androidx {
    name = "Paging-Common"
    publish = Publish.SNAPSHOT_AND_RELEASE
    inceptionYear = "2017"
    description = "Android Paging-Common"
}

android {
    namespace "androidx.paging.common"
}
